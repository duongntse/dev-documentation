1. creates a new ssh key
$ ssh-keygen -t rsa -b 4096 -C "duongntse@gmail.com"
   > Enter file in which to save the key (/home/duongntse/.ssh/id_rsa): Enter
   > Enter passphrase (empty for no passphrase): [Type a passphrase]
   > Enter same passphrase again: [Type passphrase again]

2. Adding your SSH key to the ssh-agent to manage your keys
     2.1 Ensure the ssh-agent is running.
	    $ eval $(ssh-agent -s)
     2.2 Add your SSH private key to the ssh-agent.
	    $ ssh-add ~/.ssh/id_rsa
	 2.3 Add the SSH key to your GitHub account.
        https://docs.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account
		 2.3.1 Copy the SSH key to your clipboard.
		       $ cat ~/.ssh/id_rsa.pub
			   > copy ssh key
		    .2 In the upper-right corner of any page, click your profile photo, then 
			   > click Settings.
		    .3 In the user settings sidebar, 
			   > click SSH and GPG keys.
		       > Click New SSH key or Add SSH key.
		       > Title: "Personal Dell Computer"
		       > Paste your key into the "Key" field.
		    .4 Click Add SSH key.
		    .5 confirm your GitHub password.
		 
2. Testing your SSH connection
   $ ssh -T git@github.com
3. Working with SSH key passphrases
   .1. Adding or changing a passphrase
   .2. Auto-launching ssh-agent on Git for Windows
       https://docs.github.com/en/github/authenticating-to-github/working-with-ssh-key-passphrases
	   .2.1: vim ~/.bashrc
	           Insert mode
	         > i
			   Command mode
			 > esc
			   Save then exit
			 > :wq 
	   .2.2: Copy the following lines and paste them into your ~/.profile or ~/.bashrc file

--------------------------START---------------------------
env=~/.ssh/agent.env

agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }

agent_start () {
    (umask 077; ssh-agent >| "$env")
    . "$env" >| /dev/null ; }

agent_load_env

# agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running
agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
    agent_start
    ssh-add
elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
    ssh-add
fi

unset env
--------------------------END---------------------------